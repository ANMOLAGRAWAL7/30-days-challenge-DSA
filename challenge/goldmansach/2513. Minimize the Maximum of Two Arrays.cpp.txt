//Q link-->https://leetcode.com/problems/minimize-the-maximum-of-two-arrays/description/
//SOLU
class Solution {
public:
    int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        long long l=1,r=1e15,ans=r,cnt1=uniqueCnt1,cnt2=uniqueCnt2,d1=divisor1,d2=divisor2;
        long long g=__gcd(d1,d2),lcm=(d1*d2)/g;
        while(l<=r){
            long long mid=(l+r)/2;
            if(d1==d2){
                long long cnt=mid-(mid/d1);
                if(cnt>=cnt1+cnt2){
                    ans=mid;
                    r=mid-1;
                }else{
                    l=mid+1;
                }
            }
            else{
                //c1 integers that are div by d1 only
                //c2 integers that are div by d2 only
                //common div by both d1 ans d2
                long long common =mid/lcm;
                long long c1=(mid/d1)-common;
                long long c2=(mid/d2)-common;
                long long avail= mid-(c1+c2+common);
                long long z1=cnt1,z2=cnt2;
                z1-=min(z1,c2);//arr1 can take integers with c2 only
                z2-=min(z2,c1);
                if(z1+z2<=avail){
                    ans=mid;
                    r=mid-1;
                }else{
                    l=mid+1;
                }
            }
        }
        return ans;
    }
};
